name: "Push application and database to ECR"

on:
  push:
    branches:
      - main

permissions:
  contents: read
  pull-requests: write

env:
  REPOSITORY_NAME: docker-containers
  DATABASE_IMAGE_NAME: mysql-app
  APPLICATION_IMAGE_NAME: flask-app
  AWS_REGION: us-east-1

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Verify directory structure
        run: ls -R

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push MySQL image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: "latest"
        run: |
          # Build the MySQL Docker image
          docker build -t $ECR_REGISTRY/${REPOSITORY_NAME}:${DATABASE_IMAGE_NAME}-${IMAGE_TAG} \
            -f ./application/Dockerfile_mysql ./application
          docker push $ECR_REGISTRY/${REPOSITORY_NAME}:${DATABASE_IMAGE_NAME}-${IMAGE_TAG}

      - name: Build, tag, and push Flask app image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: "latest"
        run: |
          # Build the Flask app Docker image
          docker build -t $ECR_REGISTRY/${REPOSITORY_NAME}:${APPLICATION_IMAGE_NAME}-${IMAGE_TAG} \
            ./application
          docker push $ECR_REGISTRY/${REPOSITORY_NAME}:${APPLICATION_IMAGE_NAME}-${IMAGE_TAG}
